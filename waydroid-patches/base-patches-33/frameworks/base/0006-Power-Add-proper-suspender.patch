From bff32996d728ef7a49533f16a32d1c2491a7b156 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Sun, 12 Sep 2021 11:55:30 +0800
Subject: [PATCH 06/27] Power: Add proper suspender

Change-Id: I7bf3efc6ac97e4c106c3cc2815fbb773cda5d57e
---
 .../server/power/PowerManagerService.java     | 34 ++++++++++++++++---
 1 file changed, 30 insertions(+), 4 deletions(-)

diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
index e08fa53ba381..a54ef4916c13 100644
--- a/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/services/core/java/com/android/server/power/PowerManagerService.java
@@ -98,6 +98,7 @@ import android.service.dreams.DreamManagerInternal;
 import android.service.vr.IVrManager;
 import android.service.vr.IVrStateCallbacks;
 import android.sysprop.InitProperties;
+import android.system.Os;
 import android.telephony.TelephonyManager;
 import android.util.ArrayMap;
 import android.util.KeyValueListParser;
@@ -141,6 +142,7 @@ import com.android.server.power.batterysaver.BatterySavingStats;
 import dalvik.annotation.optimization.NeverCompile;
 
 import lineageos.providers.LineageSettings;
+import lineageos.waydroid.Hardware;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -154,6 +156,8 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.concurrent.Executor;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * The power manager service is responsible for coordinating power management
@@ -318,6 +322,8 @@ public final class PowerManagerService extends SystemService
     private final Clock mClock;
     private final Injector mInjector;
 
+    private Hardware mWaydroidHardware;
+    private boolean mWaydroidSuspendDefault;
     private AppOpsManager mAppOpsManager;
     private LightsManager mLightsManager;
     private BatteryManagerInternal mBatteryManagerInternal;
@@ -1130,6 +1136,17 @@ public final class PowerManagerService extends SystemService
                 org.lineageos.platform.internal.R.dimen
                         .config_keyboardBrightnessSettingDefaultFloat);
 
+        mWaydroidHardware = Hardware.getInstance(context);
+        try {
+            Matcher kernel_ver = Pattern.compile("(\\d+)\\.(\\d+)").matcher(Os.uname().release);
+            kernel_ver.find();
+            int kernel_maj = Integer.parseInt(kernel_ver.group(1));
+            int kernel_min = Integer.parseInt(kernel_ver.group(2));
+            mWaydroidSuspendDefault = kernel_maj > 4 || (kernel_maj == 4 && kernel_min >= 9);
+        } catch (Exception e) {
+            mWaydroidSuspendDefault = false;
+        }
+
         // Save brightness values:
         // Get float values from config.
         // Store float if valid
@@ -2098,10 +2115,10 @@ public final class PowerManagerService extends SystemService
                     + ", flags=0x" + Integer.toHexString(flags) + ", uid=" + uid);
         }
 
-        if (eventTime < powerGroup.getLastSleepTimeLocked()
+        /*if (eventTime < powerGroup.getLastSleepTimeLocked()
                 || eventTime < powerGroup.getLastWakeTimeLocked() || !mSystemReady) {
             return false;
-        }
+        }*/
 
         Trace.traceBegin(Trace.TRACE_TAG_POWER, "userActivity");
         try {
@@ -3344,8 +3361,17 @@ public final class PowerManagerService extends SystemService
                 changed = dreamPowerGroupLocked(powerGroup, time,
                         Process.SYSTEM_UID, /* allowWake= */ false);
             } else {
-                changed = dozePowerGroupLocked(powerGroup, time,
-                        PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, Process.SYSTEM_UID);
+                //changed = dozePowerGroupLocked(powerGroup, time,
+                //        PowerManager.GO_TO_SLEEP_REASON_TIMEOUT, Process.SYSTEM_UID);
+                final boolean suspend = SystemProperties.getBoolean("persist.waydroid.suspend", mWaydroidSuspendDefault);
+                final boolean no_open_wins = SystemProperties.get("waydroid.open_windows", "-1").equals("0");
+                if (mWaydroidHardware != null && suspend && no_open_wins && ((dirty & DIRTY_WAKE_LOCKS) == 0)) {
+                    wakePowerGroupLocked(powerGroup, SystemClock.uptimeMillis(),
+                        PowerManager.WAKE_REASON_UNKNOWN,
+                        "android.server.power:DREAM_FINISHED", Process.SYSTEM_UID,
+                        mContext.getOpPackageName(), Process.SYSTEM_UID);
+                    mWaydroidHardware.suspend();
+                }
             }
         }
         return changed;
-- 
2.41.0

