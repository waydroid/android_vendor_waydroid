From c90c980e253fc0f2060164800d5a6176cbe56162 Mon Sep 17 00:00:00 2001
From: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Date: Wed, 24 Oct 2018 08:23:52 +0200
Subject: [PATCH 04/10] EventHub: Add wayland inputs support

Co-authored-by: Erfan Abdi <erfangplus@gmail.com>
Co-authored-by: Alessandro Astone <ales.astone@gmail.com>
Change-Id: I6b3213eb650395b658b9216c0e11dfb2699b59ef
---
 services/inputflinger/reader/EventHub.cpp     | 170 +++++++++++++++++-
 .../inputflinger/reader/include/EventHub.h    |   3 +
 2 files changed, 167 insertions(+), 6 deletions(-)

diff --git a/services/inputflinger/reader/EventHub.cpp b/services/inputflinger/reader/EventHub.cpp
index 1b58284831..ba76cc4ede 100644
--- a/services/inputflinger/reader/EventHub.cpp
+++ b/services/inputflinger/reader/EventHub.cpp
@@ -672,6 +672,28 @@ static void ensureProcessCanBlockSuspend() {
 
 const int EventHub::EPOLL_MAX_EVENTS;
 
+enum {
+    WL_INPUT_TOUCH,
+    WL_INPUT_KEYBOARD,
+    WL_INPUT_POINTER,
+    WL_INPUT_TABLET,
+    WL_INPUT_TOTAL
+};
+
+static const char *INPUT_PIPE_NAME[WL_INPUT_TOTAL] = {
+    "/dev/input/wl_touch_events",
+    "/dev/input/wl_keyboard_events",
+    "/dev/input/wl_pointer_events",
+    "/dev/input/wl_tablet_events"
+};
+
+static const char *INPUT_TYPE_NAME[WL_INPUT_TOTAL] = {
+    "wayland_touch",
+    "wayland_keyboard",
+    "wayland_pointer",
+    "wayland_tablet"
+};
+
 EventHub::EventHub(void)
       : mBuiltInKeyboardId(NO_BUILT_IN_KEYBOARD),
         mNextDeviceId(1),
@@ -791,6 +813,9 @@ void EventHub::getConfiguration(int32_t deviceId, PropertyMap* outConfiguration)
 
 status_t EventHub::getAbsoluteAxisInfo(int32_t deviceId, int axis,
                                        RawAbsoluteAxisInfo* outAxisInfo) const {
+    char property[PROPERTY_VALUE_MAX];
+    int width = 0;
+    int height = 0;
     outAxisInfo->clear();
 
     if (axis >= 0 && axis <= ABS_MAX) {
@@ -799,12 +824,58 @@ status_t EventHub::getAbsoluteAxisInfo(int32_t deviceId, int axis,
         Device* device = getDeviceLocked(deviceId);
         if (device != nullptr && device->hasValidFd() && device->absBitmask.test(axis)) {
             struct input_absinfo info;
-            if (ioctl(device->fd, EVIOCGABS(axis), &info)) {
-                ALOGW("Error reading absolute controller %d for device %s fd %d, errno=%d", axis,
-                      device->identifier.name.c_str(), device->fd, errno);
-                return -errno;
+
+            if (device->identifier.location != "wayland") {
+                if (ioctl(device->fd, EVIOCGABS(axis), &info)) {
+                    ALOGW("Error reading absolute controller %d for device %s fd %d, errno=%d", axis,
+                          device->identifier.name.c_str(), device->fd, errno);
+                    return -errno;
+                }
+            } else {
+
+            if (property_get("waydroid.display_width", property, nullptr) > 0) {
+                width = atoi(property);
             }
 
+            if (property_get("waydroid.display_height", property, nullptr) > 0) {
+                height = atoi(property);
+            }
+
+            info.minimum = 0;
+
+            switch(axis) {
+            case ABS_MT_POSITION_X:
+            case ABS_X:
+                info.maximum = width;
+                break;
+            case ABS_MT_POSITION_Y:
+            case ABS_Y:
+                info.maximum = height;
+                break;
+            case ABS_MT_SLOT:
+                info.maximum = 9;
+                break;
+            case ABS_PRESSURE:
+            case ABS_MT_PRESSURE:
+                info.maximum = 255;
+                break;
+            case ABS_MT_TRACKING_ID:
+                info.maximum = 65535;
+                break;
+            case ABS_MT_TOUCH_MAJOR:
+            case ABS_MT_TOUCH_MINOR:
+                info.maximum = 15;
+                break;
+            case ABS_MT_ORIENTATION:
+                info.maximum = 1;
+                break;
+            }
+
+            info.flat = 0;
+            info.fuzz = 0;
+            info.resolution = 1;
+}
+
             if (info.minimum != info.maximum) {
                 outAxisInfo->valid = true;
                 outAxisInfo->minValue = info.minimum;
@@ -1941,6 +2012,8 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
     }
 
     char buffer[80];
+    int inputType = 0;
+    bool isWayland = false;
 
     ALOGV("Opening device: %s", devicePath.c_str());
 
@@ -1950,8 +2023,24 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
         return;
     }
 
+    for (inputType = 0; inputType < WL_INPUT_TOTAL; inputType++) {
+        if (devicePath == INPUT_PIPE_NAME[inputType]) {
+            isWayland = true;
+            break;
+        }
+    }
+
     InputDeviceIdentifier identifier;
 
+if (isWayland) {
+    identifier.name = INPUT_TYPE_NAME[inputType];
+    identifier.bus = BUS_VIRTUAL;
+    identifier.product = 1;
+    identifier.vendor = 1;
+    identifier.version = 1;
+    identifier.location = "wayland";
+    identifier.uniqueId = INPUT_TYPE_NAME[inputType];
+} else {
     // Get device name.
     if (ioctl(fd, EVIOCGNAME(sizeof(buffer) - 1), &buffer) < 1) {
         ALOGE("Could not get device name for %s: %s", devicePath.c_str(), strerror(errno));
@@ -2005,6 +2094,7 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
         buffer[sizeof(buffer) - 1] = '\0';
         identifier.uniqueId = buffer;
     }
+}
 
     // Fill in the descriptor.
     assignDescriptorLocked(identifier);
@@ -2023,8 +2113,8 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
     ALOGV("  location:   \"%s\"\n", identifier.location.c_str());
     ALOGV("  unique id:  \"%s\"\n", identifier.uniqueId.c_str());
     ALOGV("  descriptor: \"%s\"\n", identifier.descriptor.c_str());
-    ALOGV("  driver:     v%d.%d.%d\n", driverVersion >> 16, (driverVersion >> 8) & 0xff,
-          driverVersion & 0xff);
+    //ALOGV("  driver:     v%d.%d.%d\n", driverVersion >> 16, (driverVersion >> 8) & 0xff,
+    //      driverVersion & 0xff);
 
     // Load the configuration file for the device.
     device->loadConfigurationLocked();
@@ -2060,6 +2150,7 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
         }
     }
 
+if (!isWayland) {
     // Figure out the kinds of events the device reports.
     device->readDeviceBitMask(EVIOCGBIT(EV_KEY, 0), device->keyBitmask);
     device->readDeviceBitMask(EVIOCGBIT(EV_ABS, 0), device->absBitmask);
@@ -2235,6 +2326,73 @@ void EventHub::openDeviceLocked(const std::string& devicePath) {
         device->setLedForControllerLocked();
     }
 
+} else {
+
+    if (inputType == WL_INPUT_TOUCH) {
+        device->classes |= InputDeviceClass::TOUCH_MT;
+
+        device->propBitmask.set(INPUT_PROP_DIRECT);
+
+        device->absBitmask.set(ABS_MT_POSITION_X);
+        device->absBitmask.set(ABS_MT_POSITION_Y);
+        device->absBitmask.set(ABS_MT_TOUCH_MAJOR);
+        device->absBitmask.set(ABS_MT_TOUCH_MINOR);
+        device->absBitmask.set(ABS_MT_ORIENTATION);
+        device->absBitmask.set(ABS_MT_TRACKING_ID);
+        device->absBitmask.set(ABS_MT_PRESSURE);
+        device->absBitmask.set(ABS_MT_SLOT);
+
+        device->absBitmask.set(ABS_X);
+        device->absBitmask.set(ABS_Y);
+        device->absBitmask.set(ABS_PRESSURE);
+    } else if (inputType == WL_INPUT_KEYBOARD) {
+        device->classes |= InputDeviceClass::KEYBOARD;
+        device->classes |= InputDeviceClass::ALPHAKEY;
+
+        device->keyBitmask.set(BTN_MISC);
+        device->keyBitmask.set(KEY_OK);
+
+        // Load the keymap for the device.
+        device->loadKeyMapLocked();
+    } else if (inputType == WL_INPUT_POINTER) {
+        device->classes |= InputDeviceClass::CURSOR;
+
+        device->propBitmask.set(INPUT_PROP_POINTER);
+
+        device->absBitmask.set(ABS_X);
+        device->absBitmask.set(ABS_Y);
+        device->keyBitmask.set(BTN_MOUSE);
+        device->relBitmask.set(REL_X);
+        device->relBitmask.set(REL_Y);
+        device->relBitmask.set(REL_HWHEEL);
+        device->relBitmask.set(REL_WHEEL);
+    } else if (inputType == WL_INPUT_TABLET) {
+        device->classes |= InputDeviceClass::EXTERNAL_STYLUS |
+                           InputDeviceClass::TOUCH;
+
+        device->propBitmask.set(INPUT_PROP_DIRECT);
+
+        device->keyBitmask.set(BTN_TOOL_PEN);
+        device->keyBitmask.set(BTN_TOOL_RUBBER);
+        device->keyBitmask.set(BTN_TOOL_BRUSH);
+        device->keyBitmask.set(BTN_TOOL_PENCIL);
+        device->keyBitmask.set(BTN_TOOL_AIRBRUSH);
+        device->keyBitmask.set(BTN_TOOL_FINGER);
+        device->keyBitmask.set(BTN_TOOL_MOUSE);
+        device->keyBitmask.set(BTN_TOOL_LENS);
+        device->keyBitmask.set(BTN_TOUCH);
+        device->keyBitmask.set(BTN_STYLUS);
+        device->keyBitmask.set(BTN_STYLUS2);
+        device->keyBitmask.set(BTN_STYLUS3);
+        device->absBitmask.set(ABS_X);
+        device->absBitmask.set(ABS_Y);
+        device->absBitmask.set(ABS_PRESSURE);
+        device->absBitmask.set(ABS_DISTANCE);
+        device->absBitmask.set(ABS_TILT_X);
+        device->absBitmask.set(ABS_TILT_Y);
+    }
+}
+
     if (registerDeviceForEpollLocked(*device) != OK) {
         return;
     }
diff --git a/services/inputflinger/reader/include/EventHub.h b/services/inputflinger/reader/include/EventHub.h
index 130c55639b..f4a9a0848d 100644
--- a/services/inputflinger/reader/include/EventHub.h
+++ b/services/inputflinger/reader/include/EventHub.h
@@ -381,6 +381,9 @@ public:
     inline bool test(size_t bit) const {
         return (bit < BITS) ? mData[bit / WIDTH].test(bit % WIDTH) : false;
     }
+    inline void set(size_t bit) {
+        mData[bit / WIDTH].set(bit % WIDTH);
+    }
     /* Returns total number of bytes needed for the array */
     inline size_t bytes() { return (BITS + CHAR_BIT - 1) / CHAR_BIT; }
     /* Returns true if array contains any non-zero bit from the range defined by start and end
-- 
2.39.2

