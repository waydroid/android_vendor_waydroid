From e34f23fe0df51ac120889997487da449b64c9177 Mon Sep 17 00:00:00 2001
From: Alessandro Astone <ales.astone@gmail.com>
Date: Sun, 5 Feb 2023 17:45:09 +0100
Subject: [PATCH] keystore2: Ignore selinux checks

Change-Id: I10c0dfdd58cfef8744d3d25b7ac73ca39d70e26a
---
 keystore2/src/utils.rs | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/keystore2/src/utils.rs b/keystore2/src/utils.rs
index 9db2eb9..0cd60f3 100644
--- a/keystore2/src/utils.rs
+++ b/keystore2/src/utils.rs
@@ -17,7 +17,7 @@
 
 use crate::error::{map_binder_status, map_km_error, Error, ErrorCode};
 use crate::key_parameter::KeyParameter;
-use crate::permission;
+// use crate::permission;
 use crate::permission::{KeyPerm, KeyPermSet, KeystorePerm};
 use crate::{
     database::{KeyType, KeystoreDB},
@@ -48,7 +48,9 @@ use std::iter::IntoIterator;
 /// This function uses its namesake in the permission module and in
 /// combination with with_calling_sid from the binder crate to check
 /// if the caller has the given keystore permission.
-pub fn check_keystore_permission(perm: KeystorePerm) -> anyhow::Result<()> {
+pub fn check_keystore_permission(_perm: KeystorePerm) -> anyhow::Result<()> {
+    Ok(())
+    /*
     ThreadState::with_calling_sid(|calling_sid| {
         permission::check_keystore_permission(
             calling_sid.ok_or_else(Error::sys).context(
@@ -57,12 +59,15 @@ pub fn check_keystore_permission(perm: KeystorePerm) -> anyhow::Result<()> {
             perm,
         )
     })
+    */
 }
 
 /// This function uses its namesake in the permission module and in
 /// combination with with_calling_sid from the binder crate to check
 /// if the caller has the given grant permission.
-pub fn check_grant_permission(access_vec: KeyPermSet, key: &KeyDescriptor) -> anyhow::Result<()> {
+pub fn check_grant_permission(_access_vec: KeyPermSet, _key: &KeyDescriptor) -> anyhow::Result<()> {
+    Ok(())
+    /*
     ThreadState::with_calling_sid(|calling_sid| {
         permission::check_grant_permission(
             calling_sid.ok_or_else(Error::sys).context(
@@ -72,16 +77,19 @@ pub fn check_grant_permission(access_vec: KeyPermSet, key: &KeyDescriptor) -> an
             key,
         )
     })
+    */
 }
 
 /// This function uses its namesake in the permission module and in
 /// combination with with_calling_sid from the binder crate to check
 /// if the caller has the given key permission.
 pub fn check_key_permission(
-    perm: KeyPerm,
-    key: &KeyDescriptor,
-    access_vector: &Option<KeyPermSet>,
+    _perm: KeyPerm,
+    _key: &KeyDescriptor,
+    _access_vector: &Option<KeyPermSet>,
 ) -> anyhow::Result<()> {
+    Ok(())
+    /*
     ThreadState::with_calling_sid(|calling_sid| {
         permission::check_key_permission(
             ThreadState::get_calling_uid(),
@@ -93,6 +101,7 @@ pub fn check_key_permission(
             access_vector,
         )
     })
+    */
 }
 
 /// This function checks whether a given tag corresponds to the access of device identifiers.
-- 
2.39.1

