From f506cecd186ff167137ab83417df861692cd0a22 Mon Sep 17 00:00:00 2001
From: Asriel Dreemurr <asriel.danctnix@gmail.com>
Date: Wed, 14 Apr 2021 01:53:02 +0700
Subject: [PATCH 2/8] Select host_hwbinder by passing argument instead of
 switching ProcessState

---
 transport/HidlBinderSupport.cpp            |  8 ++------
 transport/ServiceManagement.cpp            | 24 +++++++---------------
 transport/include/hidl/ServiceManagement.h |  6 +++---
 3 files changed, 12 insertions(+), 26 deletions(-)

diff --git a/transport/HidlBinderSupport.cpp b/transport/HidlBinderSupport.cpp
index 70b41c4..984908e 100644
--- a/transport/HidlBinderSupport.cpp
+++ b/transport/HidlBinderSupport.cpp
@@ -283,10 +283,8 @@ void configureBinderRpcThreadpool(size_t maxThreads, bool callerWillJoin) {
     LOG_ALWAYS_FATAL_IF(ret != OK, "Could not setThreadPoolConfiguration: %d", ret);
 
     if (doesSupportHostBinder()){
-        ProcessState::switchToHostBinder(!ProcessState::isHostBinder());
-        status_t ret = ProcessState::self()->setThreadPoolConfiguration(
+        status_t ret = ProcessState::self(true)->setThreadPoolConfiguration(
             maxThreads, callerWillJoin /*callerJoinsPool*/);
-        ProcessState::switchToHostBinder(!ProcessState::isHostBinder());
         LOG_ALWAYS_FATAL_IF(ret != OK, "Could not setThreadPoolConfiguration for Host: %d", ret);
     }
 
@@ -298,9 +296,7 @@ void joinBinderRpcThreadpool() {
                         "HIDL joinRpcThreadpool without calling configureRpcThreadPool.");
     IPCThreadState::self()->joinThreadPool();
     if (doesSupportHostBinder()){
-        ProcessState::switchToHostBinder(!ProcessState::isHostBinder());
-        IPCThreadState::self()->joinThreadPool();
-        ProcessState::switchToHostBinder(!ProcessState::isHostBinder());
+        IPCThreadState::selfForHost()->joinThreadPool();
     }
 }
 
diff --git a/transport/ServiceManagement.cpp b/transport/ServiceManagement.cpp
index f5e5334..b051ab1 100644
--- a/transport/ServiceManagement.cpp
+++ b/transport/ServiceManagement.cpp
@@ -195,13 +195,13 @@ void onRegistration(const std::string& packageName, const std::string& interface
 
 }  // details
 
-sp<IServiceManager1_0> defaultServiceManager() {
-    return defaultServiceManager1_2();
+sp<IServiceManager1_0> defaultServiceManager(bool useHostHwBinder) {
+    return defaultServiceManager1_2(useHostHwBinder);
 }
-sp<IServiceManager1_1> defaultServiceManager1_1() {
-    return defaultServiceManager1_2();
+sp<IServiceManager1_1> defaultServiceManager1_1(bool useHostHwBinder) {
+    return defaultServiceManager1_2(useHostHwBinder);
 }
-sp<IServiceManager1_2> defaultServiceManager1_2() {
+sp<IServiceManager1_2> defaultServiceManager1_2(bool useHostHwBinder) {
     using android::hidl::manager::V1_2::BnHwServiceManager;
     using android::hidl::manager::V1_2::BpHwServiceManager;
 
@@ -225,7 +225,7 @@ sp<IServiceManager1_2> defaultServiceManager1_2() {
         while (gDefaultServiceManager == nullptr) {
             gDefaultServiceManager =
                 fromBinder<IServiceManager1_2, BpHwServiceManager, BnHwServiceManager>(
-                    ProcessState::self()->getContextObject(nullptr));
+                    ProcessState::self(useHostHwBinder)->getContextObject(nullptr));
             if (gDefaultServiceManager == nullptr) {
                 LOG(ERROR) << "Waited for hwservicemanager, but got nullptr.";
                 sleep(1);
@@ -278,7 +278,6 @@ static void registerReference(const hidl_string &interfaceName, const hidl_strin
         return;
     }
 
-    ProcessState::switchToHostBinder(false);
     sp<IServiceManager1_0> binderizedManager = defaultServiceManager();
     if (binderizedManager == nullptr) {
         LOG(WARNING) << "Could not registerReference for "
@@ -747,7 +746,6 @@ sp<::android::hidl::base::V1_0::IBase> getRawServiceInternal(const std::string&
     if (kIsRecovery) {
         transport = Transport::PASSTHROUGH;
     } else {
-        ProcessState::switchToHostBinder(false);
         sm = defaultServiceManager1_1();
         if (sm == nullptr) {
             ALOGE("getService: defaultServiceManager() is null");
@@ -764,24 +762,17 @@ sp<::android::hidl::base::V1_0::IBase> getRawServiceInternal(const std::string&
         if (doesSupportHostBinder())
         {
             if (transportRet == Transport::EMPTY) {
-                ProcessState::switchToHostBinder(true);
-                sm = defaultServiceManager1_1();
+                sm = defaultServiceManager1_1(/*useHostBinder*/true);
                 if (sm == nullptr) {
                     ALOGE("getService: defaultServiceManager() of host is null");
-                    ProcessState::switchToHostBinder(false);
                     return nullptr;
                 }
                 transportRet = sm->getTransport(descriptor, instance);
                 if (!transportRet.isOk()) {
                     ALOGE("getService: defaultServiceManager()->getTransport of host returns %s",
                         transportRet.description().c_str());
-                    ProcessState::switchToHostBinder(false);
                     return nullptr;
                 }
-                if (transportRet == Transport::EMPTY) {
-                    ProcessState::switchToHostBinder(false);
-                    sm = defaultServiceManager1_1();
-                }
             }
         }
 
@@ -864,7 +855,6 @@ status_t registerAsServiceInternal(const sp<IBase>& service, const std::string&
         return UNEXPECTED_NULL;
     }
 
-    ProcessState::switchToHostBinder(false);
     sp<IServiceManager1_2> sm = defaultServiceManager1_2();
     if (sm == nullptr) {
         return INVALID_OPERATION;
diff --git a/transport/include/hidl/ServiceManagement.h b/transport/include/hidl/ServiceManagement.h
index 886e816..70edd0d 100644
--- a/transport/include/hidl/ServiceManagement.h
+++ b/transport/include/hidl/ServiceManagement.h
@@ -72,9 +72,9 @@ status_t registerAsServiceInternal(const sp<::android::hidl::base::V1_0::IBase>&
 
 // These functions are for internal use by hidl. If you want to get ahold
 // of an interface, the best way to do this is by calling IFoo::getService()
-sp<::android::hidl::manager::V1_0::IServiceManager> defaultServiceManager();
-sp<::android::hidl::manager::V1_1::IServiceManager> defaultServiceManager1_1();
-sp<::android::hidl::manager::V1_2::IServiceManager> defaultServiceManager1_2();
+sp<::android::hidl::manager::V1_0::IServiceManager> defaultServiceManager(bool useHostHwBinder=false);
+sp<::android::hidl::manager::V1_1::IServiceManager> defaultServiceManager1_1(bool useHostHwBinder=false);
+sp<::android::hidl::manager::V1_2::IServiceManager> defaultServiceManager1_2(bool useHostHwBinder=false);
 sp<::android::hidl::manager::V1_0::IServiceManager> getPassthroughServiceManager();
 sp<::android::hidl::manager::V1_1::IServiceManager> getPassthroughServiceManager1_1();
 
-- 
2.39.1

